import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns
import scanpy as sc
import anndata

sns.set_theme(style='white')


def plot_qc_joint(
        adata,
        x,
        y,
        log=1,
        hue=None,
        marginal_hue=None,
        marginal_legend=False,
        palette=None,
        x_threshold=(0, np.inf),
        y_threshold=(0, np.inf),
        title='',
        return_adata=False
):
    """
    Plot scatter plot with marginal histograms from obs columns in anndata object.

    :param adata: anndata object
    :param x: obs column for x axis
    :param y: obs column for y axis
    :param log: log base for transforming values. Default 1, no transformation
    :param hue: obs column with annotations for color coding scatter plot points
    :param marginal_hue: obs column with annotations for color coding marginal plot distributions
    :param palette: a matplotlib colormap for scatterplot points
    :param x_threshold: tuple of upper and lower filter thresholds for x axis
    :param y_threshold: tuple of upper and lower filter thresholds for y axis
    :param title: Title text for plot
    :return:
        seaborn plot (and anndata object with updated values, if `return_adata=True`)

    .. code-block:: python

        # calculate QC metrics
        adata.var["mito"] = adata.var_names.str.startswith("MT-")
        sc.pp.calculate_qc_metrics(adata, qc_vars=["mito"], inplace=True)

        # Plot QC stats
        plot_qc_joint(
            adata,
            x='total_counts',  # generated by sc.pp.calculate_qc_metrics
            y='n_genes_by_counts',  # generated by sc.pp.calculate_qc_metrics
            hue='pct_counts_mito',  # generated by sc.pp.calculate_qc_metrics
            palette='plasma',
            marginal_hue=hue,
            title=f'Joint QC for {dataset}',
        )
    """

    adata = adata.copy()

    def log1p_base(_x, base):
        return np.log1p(_x) / np.log(base)

    if log > 1:
        x_log = f'log{log} {x}'
        y_log = f'log{log} {y}'
        adata.obs[x_log] = log1p_base(adata.obs[x], log)
        adata.obs[y_log] = log1p_base(adata.obs[y], log)
        x_threshold = log1p_base(x_threshold, log)
        y_threshold = log1p_base(y_threshold, log)
        x = x_log
        y = y_log

    g = sns.JointGrid(
        data=adata.obs,
        x=x,
        y=y,
        xlim=(0, adata.obs[x].max()),
        ylim=(0, adata.obs[y].max()),
    )
    # main plot
    g.plot_joint(
        sns.scatterplot,
        data=adata[adata.obs.sample(adata.n_obs).index].obs,
        alpha=.3,
        hue=hue,
        s=2,
        palette=palette,
    )
    # marginal hist plot
    use_marg_hue = marginal_hue is not None
    g.plot_marginals(
        sns.histplot,
        data=adata.obs,
        hue=marginal_hue,
        legend=marginal_legend,
        element='step' if use_marg_hue else 'bars',
        fill=False,
        bins=100
    )

    g.fig.suptitle(title)

    # x threshold
    for t, t_def in zip(x_threshold, (0, np.inf)):
        if t != t_def:
            g.ax_joint.axhline(y=t, color='red')
            g.ax_marg_y.axhline(y=t, color='red')

    # y threshold
    for t, t_def in zip(y_threshold, (0, np.inf)):
        if t != t_def:
            g.ax_joint.axvline(x=t, color='red')
            g.ax_marg_x.axvline(x=t, color='red')

    if return_adata:
        return g, adata
    return g

